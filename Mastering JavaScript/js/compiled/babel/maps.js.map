{"version":3,"sources":["maps.js"],"names":[],"mappings":";;;;;;;;;;IACM,W;AAEF,2BAAc;AAAA;;AACV,aAAK,MAAL,GAAc,IAAI,GAAJ,EAAd;AACH;;;;sCAEa,G,EAAK,I,EAAM;AACrB,gBAAI,CAAC,KAAK,MAAL,CAAY,GAAZ,CAAgB,GAAhB,CAAL,EAA2B;AACvB,qBAAK,MAAL,CAAY,GAAZ,CAAgB,GAAhB,EAAqB,IAArB;AACH,aAFD,MAGK;AACD,wBAAQ,GAAR,CAAY,uCAAuC,GAAnD;AACH;AACJ;;;sCAEa,G,EAAK;AACf,mBAAO,KAAK,MAAL,CAAY,GAAZ,CAAgB,GAAhB,CAAP;AACH;;;yCAEgB,G,EAAK;AAClB,iBAAK,MAAL,CAAY,MAAZ,CAAmB,GAAnB;AACH;;;2CAEkB;AACf,iBAAK,MAAL,CAAY,KAAZ;AACH;;;iCAEQ;AACL,mBAAO,KAAK,MAAZ;AACH;;;;;;;;;AAIL,IAAI,MAAM,IAAI,GAAJ,EAAV;AACA,IAAI,GAAJ,CAAQ,SAAR,EAAkB,eAAlB;AACA,IAAI,GAAJ,CAAQ,IAAR,EAAc,gCAAd;AACA,IAAI,GAAJ,CAAQ,IAAR,EAAc,gCAAd,E;AACA,QAAQ,GAAR,CAAY,iBAAiB,IAAI,GAAJ,CAAQ,IAAR,CAA7B;AACA,QAAQ,GAAR,CAAY,IAAI,IAAhB;;AAEA,IAAI,IAAI,GAAJ,CAAQ,SAAR,CAAJ,EAAwB,QAAQ,GAAR,CAAY,WAAZ;AACxB,IAAI,MAAJ,CAAW,SAAX,E;AACA,IAAI,KAAJ,G;;AAEA,QAAQ,GAAR,CAAY,IAAZ;;AAEA,IAAI,QAAQ,IAAI,WAAJ,EAAZ;AACA,MAAM,aAAN,CAAoB,SAApB,EAA8B,eAA9B;AACA,MAAM,aAAN,CAAoB,IAApB,EAA0B,gCAA1B;AACA,MAAM,aAAN,CAAoB,SAApB,EAA+B,mBAA/B;;AAEA,IAAI,MAAM,MAAM,MAAN,EAAV;;;AAGA,IAAI,OAAJ,CAAY,UAAS,GAAT,EAAc,GAAd,EAAmB;AAC3B,YAAQ,GAAR,CAAY,oCAAoC,GAApC,GAA0C,IAA1C,GAAiD,GAA7D;AACH,CAFD;;AAIA,QAAQ,GAAR,CAAY,IAAZ;AACA,IAAI,OAAJ,CAAY,UAAC,GAAD,EAAM,GAAN;AAAA,WAAc,QAAQ,GAAR,CAAY,MAAM,IAAN,GAAa,GAAzB,CAAd;AAAA,CAAZ;;AAEA,QAAQ,GAAR,CAAY,IAAZ;;;;;;AACA,yBAAsB,GAAtB,8HAA2B;AAAA;;AAAA,YAAjB,GAAiB;AAAA,YAAb,GAAa;;AACvB,gBAAQ,GAAR,CAAY,yCAAyC,GAAzC,GAA+C,IAA/C,GAAsD,GAAlE;AACH;;;;;;;;;;;;;;;;AAED,QAAQ,GAAR,CAAY,iCAAiC,MAAM,aAAN,CAAoB,IAApB,CAA7C;;AAEA,MAAM,gBAAN;AACA,QAAQ,GAAR,CAAY,8CAA8C,MAAM,MAAN,GAAe,IAAzE","file":"maps.js","sourcesContent":["//Using Map\r\nclass Departments {\r\n\r\n    constructor() {\r\n        this._depts = new Map();\r\n    }\r\n\r\n    addDepartment(key, desc) {\r\n        if (!this._depts.has(key)) {\r\n            this._depts.set(key, desc);\r\n        }\r\n        else {\r\n            console.log('Duplicate department was blocked: ' + key);\r\n        }\r\n    }\r\n\r\n    getDepartment(key) {\r\n        return this._depts.get(key);\r\n    }\r\n\r\n    removeDepartment(key) {\r\n        this._depts.delete(key);\r\n    }\r\n\r\n    clearDepartments() {\r\n        this._depts.clear();\r\n    }\r\n\r\n    getAll() {\r\n        return this._depts;\r\n    }\r\n}\r\n\r\n//Simple example of Map\r\nvar map = new Map();\r\nmap.set('Finance','Process bills');\r\nmap.set('HR', 'Human Resources and Healthcare');\r\nmap.set('HR', 'Human Resources and Healthcare'); //Duplicate ignored\r\nconsole.log('Getting HR: ' + map.get('HR'));\r\nconsole.log(map.size);\r\n\r\nif (map.has('Finance')) console.log('Found it!');\r\nmap.delete('Finance'); //Delete single item\r\nmap.clear(); //Clear all items\r\n\r\nconsole.log('\\n');\r\n//No duplicate values allowed due to using Set\r\nvar depts = new Departments();\r\ndepts.addDepartment('Finance','Process bills');\r\ndepts.addDepartment('HR', 'Human Resources and Healthcare');\r\ndepts.addDepartment('Finance', 'Process the bills');\r\n\r\nlet all = depts.getAll();\r\n\r\n//Iterate through the set\r\nall.forEach(function(val, key) {\r\n    console.log('Found department using forEach ' + key + ': ' + val);\r\n});\r\n\r\nconsole.log('\\n');\r\nall.forEach((val, key) => console.log(key + ': ' + val));\r\n\r\nconsole.log('\\n');\r\nfor (let [key,val] of all) {\r\n    console.log('Found department using for of loop: ' + key + ': ' + val);\r\n}\r\n\r\nconsole.log('\\nFinding specific HR key : ' + depts.getDepartment('HR'));\r\n\r\ndepts.clearDepartments();\r\nconsole.log('\\nClearing all departments: Size is now: ' + depts.getAll().size);\r\n\r\n"],"sourceRoot":"/source/"}